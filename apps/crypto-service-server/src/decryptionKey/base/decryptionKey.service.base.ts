/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DecryptionKey as PrismaDecryptionKey } from "@prisma/client";

export class DecryptionKeyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DecryptionKeyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.decryptionKey.count(args);
  }

  async decryptionKeys(
    args: Prisma.DecryptionKeyFindManyArgs
  ): Promise<PrismaDecryptionKey[]> {
    return this.prisma.decryptionKey.findMany(args);
  }
  async decryptionKey(
    args: Prisma.DecryptionKeyFindUniqueArgs
  ): Promise<PrismaDecryptionKey | null> {
    return this.prisma.decryptionKey.findUnique(args);
  }
  async createDecryptionKey(
    args: Prisma.DecryptionKeyCreateArgs
  ): Promise<PrismaDecryptionKey> {
    return this.prisma.decryptionKey.create(args);
  }
  async updateDecryptionKey(
    args: Prisma.DecryptionKeyUpdateArgs
  ): Promise<PrismaDecryptionKey> {
    return this.prisma.decryptionKey.update(args);
  }
  async deleteDecryptionKey(
    args: Prisma.DecryptionKeyDeleteArgs
  ): Promise<PrismaDecryptionKey> {
    return this.prisma.decryptionKey.delete(args);
  }
}
