/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DataExtraction as PrismaDataExtraction } from "@prisma/client";

export class DataExtractionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DataExtractionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dataExtraction.count(args);
  }

  async dataExtractions(
    args: Prisma.DataExtractionFindManyArgs
  ): Promise<PrismaDataExtraction[]> {
    return this.prisma.dataExtraction.findMany(args);
  }
  async dataExtraction(
    args: Prisma.DataExtractionFindUniqueArgs
  ): Promise<PrismaDataExtraction | null> {
    return this.prisma.dataExtraction.findUnique(args);
  }
  async createDataExtraction(
    args: Prisma.DataExtractionCreateArgs
  ): Promise<PrismaDataExtraction> {
    return this.prisma.dataExtraction.create(args);
  }
  async updateDataExtraction(
    args: Prisma.DataExtractionUpdateArgs
  ): Promise<PrismaDataExtraction> {
    return this.prisma.dataExtraction.update(args);
  }
  async deleteDataExtraction(
    args: Prisma.DataExtractionDeleteArgs
  ): Promise<PrismaDataExtraction> {
    return this.prisma.dataExtraction.delete(args);
  }
}
